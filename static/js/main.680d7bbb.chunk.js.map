{"version":3,"sources":["components/Owner.js","components/Task.js","components/AddTask.js","App.js","serviceWorker.js","index.js"],"names":["Owner","props","state","owner","editMode","isOwnerBlank","enableEditMode","bind","handleChange","updateOwner","handleKeypress","this","setState","event","target","value","key","ownerDisplay","type","onChange","onKeyPress","onClick","errorDisplay","className","React","Component","Task","handleCheck","handleRemove","updateTask","index","isCompleted","removeTask","deleteDisplay","id","name","checked","AddTask","taskName","isTaskBlank","submitTask","addTask","App","defaultOwner","defaultTasks","localStorage","getItem","Array","from","tasks","JSON","parse","resetToDefault","setItem","stringify","newOwner","completion","task","splice","push","unshift","map","Object","assign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.680d7bbb.chunk.js","sourcesContent":["import React from 'react';\r\n// import event from 'event-module';\r\n\r\nclass Owner extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            owner: this.props.owner,\r\n            editMode: false,\r\n            isOwnerBlank: false\r\n        }\r\n\r\n        this.enableEditMode = this.enableEditMode.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.updateOwner = this.updateOwner.bind(this)\r\n        this.handleKeypress = this.handleKeypress.bind(this)\r\n    }\r\n\r\n    enableEditMode() {\r\n        this.setState({\r\n            owner: this.props.owner,\r\n            editMode: true\r\n        });\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            owner: event.target.value\r\n        })\r\n    }\r\n    handleKeypress(event) {\r\n        if(event.key === 'Enter') this.updateOwner()\r\n    }\r\n    updateOwner() {\r\n        if (this.state.owner === '') {\r\n            this.setState({\r\n                isOwnerBlank: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                editMode: false,\r\n                isOwnerBlank: false\r\n            })\r\n            this.props.updateOwner(this.state.owner)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let ownerDisplay = (this.state.editMode) \r\n            ? <div>\r\n                <p>\r\n                    <input type=\"text\" value={this.state.owner} onChange={this.handleChange} onKeyPress={this.handleKeypress}></input>\r\n                    <button onClick={this.updateOwner}>Save</button>\r\n                </p>\r\n            </div>\r\n            : <div>\r\n                <h2>Owner: {this.props.owner}\r\n                    <button onClick={this.enableEditMode}>Edit</button>\r\n                </h2>\r\n            </div>\r\n        let errorDisplay = (this.state.isOwnerBlank)\r\n            ? <p className=\"error\">Owner name cannot be blank</p>\r\n            : ''\r\n\r\n        return (\r\n            <div className=\"Header\"> \r\n                {ownerDisplay}\r\n                {errorDisplay}\r\n                {/* {this.state.owner}\r\n                {this.state.isOwnerBlank.toString()} */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Owner;","import React, { Component } from 'react'\r\n\r\nexport default class Task extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleCheck = this.handleCheck.bind(this)\r\n        this.handleRemove = this.handleRemove.bind(this)\r\n    }\r\n    \r\n    handleCheck(event) {\r\n        this.props.updateTask(this.props.index, !(this.props.isCompleted))\r\n    }\r\n\r\n    handleRemove() {\r\n        this.props.removeTask(this.props.index)\r\n    }\r\n\r\n    render() {\r\n        let className, deleteDisplay\r\n        className = 'task'\r\n        if (this.props.isCompleted) {\r\n            className += ' task-completed'\r\n            deleteDisplay = <button className=\"delete-button\" onClick={this.handleRemove}>x</button>\r\n        }\r\n\r\n        return (            \r\n            <div className={className}>\r\n                <input type=\"checkbox\" id=\"isCompleted\" name=\"task\" checked={this.props.isCompleted} onChange={this.handleCheck}></input>\r\n                <label className=\"task-name\">{this.props.name}</label>\r\n                {deleteDisplay}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class AddTask extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            taskName: '',\r\n            isTaskBlank: false\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.submitTask = this.submitTask.bind(this)\r\n        this.handleKeypress = this.handleKeypress.bind(this)\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            taskName: event.target.value\r\n        })\r\n    }\r\n    handleKeypress(event) {\r\n        if (event.key === \"Enter\") this.submitTask()\r\n    }\r\n    submitTask() {\r\n        if (this.state.taskName === '') {\r\n            this.setState({\r\n                isTaskBlank: true\r\n            })\r\n        } else {\r\n            this.props.addTask(this.state.taskName)\r\n            this.setState({\r\n                taskName: '',\r\n                isTaskBlank: false\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        let errorDisplay = (this.state.isTaskBlank)\r\n            ? <p className=\"error\">Task cannot be blank</p>\r\n            : ''\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"new-task\">\r\n                    <label>Enter New Task: </label>\r\n                    <input type=\"text\" value={this.state.taskName} onChange={this.handleChange} onKeyPress={this.handleKeypress}></input>\r\n                    <button onClick={this.submitTask}>+</button>\r\n                    {errorDisplay}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './style.scss';\nimport Owner from './components/Owner.js'\nimport Task from './components/Task.js'\nimport AddTask from './components/AddTask.js'\n\nclass App extends React.Component {\n    defaultOwner = \"Emky\"\n    defaultTasks = [\n        { name: \"Learn Elm\", isCompleted: false },\n        { name: \"Practice StarCraft\", isCompleted: false },\n        { name: \"Dissect TIC-80\", isCompleted: false },\n        { name: \"Build Siege Tank\", isCompleted: true },\n    ]\n    constructor(props) {\n        super(props)\n\n        const owner = (localStorage.getItem('owner')) || Array.from(this.defaultOwner)\n        const tasks = JSON.parse((localStorage.getItem('tasks'))) || this.defaultTasks\n\n        this.state = {\n            owner: owner,\n            tasks: tasks\n        }\n\n        this.updateOwner = this.updateOwner.bind(this)\n        this.updateTask = this.updateTask.bind(this)\n        this.addTask = this.addTask.bind(this)\n        this.removeTask = this.removeTask.bind(this)\n        this.resetToDefault = this.resetToDefault.bind(this)\n    }\n\n    componentDidUpdate() {\n        localStorage.setItem('owner', this.state.owner)\n        localStorage.setItem('tasks', JSON.stringify(this.state.tasks))\n    }\n\n    updateOwner(newOwner) {\n        this.setState(()=>({\n            owner: newOwner\n        }))\n    }\n\n    updateTask(index, completion) {\n        let tasks, task\n        tasks = this.state.tasks\n\n        tasks[index].isCompleted = completion\n        if (completion === true) {\n            task = tasks[index]\n            tasks.splice(index, 1)\n            tasks.push(task)\n        }\n\n        this.setState({\n            tasks: tasks\n        })\n    }\n\n    addTask(taskName) {\n        let tasks = this.state.tasks\n        tasks.unshift({name: taskName, isCompleted: false})\n\n        this.setState({\n            tasks: tasks\n        })\n    }\n    removeTask(index) {\n        let tasks = this.state.tasks\n        tasks.splice(index, 1)\n\n        this.setState({\n            tasks: tasks\n        })\n    }\n    resetToDefault() {\n        this.setState({\n            owner: this.defaultOwner,\n            tasks: this.defaultTasks.map(task=>Object.assign({}, task))\n        })\n    }\n    render() {\n        return (\n            <div className=\"app\">\n                <h1 className=\"title\">Another React TODO</h1>\n                <span className=\"author\">by Juno Nguyen</span>\n                <Owner owner={this.state.owner} updateOwner={this.updateOwner}/>\n                <AddTask addTask={this.addTask}/>\n                <div className=\"task-list\">\n                    {this.state.tasks.map((task, index) => \n                            <Task key={index} name={task.name} index={index} isCompleted={task.isCompleted} updateTask={this.updateTask} removeTask={this.removeTask}/>\n                        )\n                    }\n                </div>\n                <button onClick={this.resetToDefault}>Reset all</button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}